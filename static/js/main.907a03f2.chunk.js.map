{"version":3,"sources":["Components/Schedule.js","Components/Form.js","App.js","index.js"],"names":["Schedule","contacts","setContacts","map","contact","index","className","name","lastName","direction","city","postalCode","phoneNumber","type","onClick","filter","c","i","deletedContact","Form","useState","setName","setLastName","setDirection","setCity","setPostalCode","setPhoneNumber","onSubmit","e","preventDefault","newContact","currentContacts","value","onChange","target","placeholder","readonly","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4NAEe,SAASA,EAAT,GAA4C,IAAzBC,EAAwB,EAAxBA,SAAUC,EAAc,EAAdA,YAMxC,OACI,8BAEQD,EAASE,KAAI,SAACC,EAASC,GACnB,OAAO,qBAAIC,UAAU,mBAAd,UACH,qBAAIA,UAAU,8BAAd,sBAAsDD,EAAQ,KAC9D,oBAAIC,UAAU,uBAAd,SAAsCF,EAAQG,OAC9C,oBAAID,UAAU,wBAAd,SAAuCF,EAAQI,WAC/C,qBAAIF,UAAU,uBAAd,UAAsCF,EAAQK,UAA9C,KAA2DL,EAAQM,KAAnE,KAA2EN,EAAQO,cACnF,oBAAIL,UAAU,uBAAd,SAAsCF,EAAQQ,cAC9C,mCAAE,wBAAQC,KAAK,SAASP,UAAU,kBAAkBQ,QAAS,kBAdjF,SAAwBT,GACnBH,EAAYD,EAASc,QAAO,SAACC,EAAGC,GAAJ,OAAUA,IAAMZ,MAaoCa,CAAeb,IAA9E,yBANuCD,EAAQQ,kB,WCT1D,SAASO,EAAT,GAA8B,IAAfjB,EAAc,EAAdA,YAG1B,EAAwBkB,mBAAS,IAAjC,mBAAOb,EAAP,KAAac,EAAb,KACA,EAAgCD,mBAAS,IAAzC,mBAAOZ,EAAP,KAAiBc,EAAjB,KACA,EAAkCF,mBAAS,IAA3C,mBAAOX,EAAP,KAAkBc,EAAlB,KACA,EAAwBH,mBAAS,IAAjC,mBAAOV,EAAP,KAAac,EAAb,KACA,EAAoCJ,mBAAS,IAA7C,mBAAOT,EAAP,KAAmBc,EAAnB,KACA,EAAsCL,mBAAS,IAA/C,mBAAOR,EAAP,KAAoBc,EAApB,KAwDA,OACI,uBAAMpB,UAAU,aAAaqB,SA7BjC,SAAgBC,GACZA,EAAEC,iBAGF,IAAMC,EAAa,CAACvB,OAAMC,WAAUC,YAAWC,OAAMC,aAAYC,eAYjEV,GAAY,SAAA6B,GAAe,4BAAQA,GAAR,CAAyBD,OAIpDT,EAAQ,IACRC,EAAY,IACZC,EAAa,IACbC,EAAQ,IACRC,EAAc,IACdC,EAAe,KAIf,UACI,uBAAOpB,UAAU,qBAAqBO,KAAK,OAAQmB,MAAOzB,EAAc0B,SAvDhF,SAAoBL,GAChBP,EAAQO,EAAEM,OAAOF,QAsDwFG,YAAY,mBAAmBC,UAAQ,IAC5I,uBAAO9B,UAAU,qBAAqBO,KAAK,OAAQmB,MAAOxB,EAAcyB,SApDhF,SAAwBL,GACpBN,EAAYM,EAAEM,OAAOF,QAmDoFG,YAAY,wBAAwBC,UAAQ,IACjJ,uBAAO9B,UAAU,qBAAqBO,KAAK,OAAQmB,MAAOvB,EAAcwB,SAjDhF,SAAyBL,GACrBL,EAAaK,EAAEM,OAAOF,QAgDmFG,YAAY,wBAAwBC,UAAQ,IACjJ,uBAAO9B,UAAU,oBAAqBO,KAAK,OAAQmB,MAAOtB,EAAcuB,SA9C/E,SAAoBL,GACjBJ,EAAQI,EAAEM,OAAOF,QA6CwFG,YAAY,mBAAmBC,UAAQ,IAC5I,uBAAO9B,UAAU,oBAAqBO,KAAK,OAAQmB,MAAOrB,EAAcsB,SA3ChF,SAA0BL,GACtBH,EAAcG,EAAEM,OAAOF,QA0CkFG,YAAY,0BAA0BC,UAAQ,IACnJ,uBAAO9B,UAAU,oBAAqBO,KAAK,OAAQmB,MAAOpB,EAAcqB,SAxChF,SAA2BL,GACvBF,EAAeE,EAAEM,OAAOF,QAuCiFG,YAAY,2BAA2BC,UAAQ,IACpJ,wBAAQvB,KAAK,SAASP,UAAU,sBAAsB0B,MAAM,WAA5D,yBClDGK,MApBf,WAEE,IAKA,EAAgCjB,mBALZ,CAClB,CAACb,KAAM,QAASC,SAAU,WAAQC,UAAW,SAASC,KAAM,YAASC,WAAY,MAAMC,YAAa,WACpG,CAACL,KAAM,OAAQC,SAAU,OAAOC,UAAW,SAASC,KAAM,YAASC,WAAY,MAAMC,YAAa,WAClG,CAACL,KAAM,QAASC,SAAU,eAAYC,UAAW,aAAaC,KAAM,YAASC,WAAY,MAAMC,YAAa,aAE9G,mBAAOX,EAAP,KAAiBC,EAAjB,KAEA,OACE,sBAAKI,UAAU,YAAf,UACG,0CACD,cAACN,EAAD,CAAUC,SAAUA,EAAUC,YAAaA,IAE3C,6CACA,cAACiB,EAAD,CAAMjB,YAAaA,IALrB,S,MCTJoC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.907a03f2.chunk.js","sourcesContent":["\n\nexport default function Schedule({contacts, setContacts}) {\n\n    function deletedContact(index) {\n         setContacts(contacts.filter((c, i) => i !== index))\n    };\n\n    return (\n        <div>\n            { \n                contacts.map((contact, index) =>{ //ponemos el index para que salga el nº del array y se imprima por pantalla el titulo contact1\n                    return <ul className=\"list-group-items\" key={contact.phoneNumber}>\n                        <li className=\"list-group-item active mb-3\">Contacto {index + 1}</li>\n                        <li className=\"list-group-item mb-3\">{contact.name}</li>\n                        <li className=\"list-group-item mb-3 \">{contact.lastName}</li>\n                        <li className=\"list-group-item mb-3\">{contact.direction}, {contact.city}, {contact.postalCode}</li>\n                        <li className=\"list-group-item mb-3\">{contact.phoneNumber}</li>\n                        <><button type=\"button\" className=\"btn btn-warning\" onClick={()=>deletedContact(index)}>Deleted</button></>\n                        </ul>  \n                })\n            }\n        </div>\n    )\n}\n","import {useState} from \"react\"; //importamos el useState \n\n\nexport default function Form({setContacts}) { //recibo la función como si fuera un props que modifica el array o los contactos\n\n //Creamos tantos useState como inputs tengamos\n    const [name, setName] = useState(\"\")\n    const [lastName, setLastName] = useState(\"\")\n    const [direction, setDirection] = useState(\"\")\n    const [city, setCity] = useState(\"\")\n    const [postalCode, setPostalCode] = useState(\"\")\n    const [phoneNumber, setPhoneNumber] = useState(\"\")\n\n //Creamos las funciones con las que vamos a hacer el evento en onclick y se lo añadimos con el mismo nombre en cada input\n    function handleName(e){\n        setName(e.target.value);\n     };\n\n    function handleLastName(e){\n        setLastName(e.target.value);\n     };\n\n    function handleDirection(e){\n        setDirection(e.target.value);\n    };\n\n     function handleCity(e){\n        setCity(e.target.value);\n    };\n\n    function handlePostalCode(e){\n        setPostalCode(e.target.value);\n    };\n    \n    function handlePhoneNumber(e){\n        setPhoneNumber(e.target.value);\n     };\n\n     //Apartado 8\n    function submit(e){\n        e.preventDefault(); //evitamos el comportamiento por defecto, no se actualiza la pág cuando le damos al enter\n        \n        //creamos un nuevo objeto con la información de todos los inputs\n        const newContact = {name, lastName, direction, city, postalCode, phoneNumber};\n        //forma larga\n        // const newContact ={\n        //     name: name,\n        //     lastName: lastName,\n        //     direction: direction,\n        //     city: city,\n        //     postalCode: postalCode,\n        //     phoneNumber: phoneNumber\n        // };\n\n        //creamos un nuevo array, al principio tendrá todos los elementos del array original y al final del todo tendrá el nuevo elemento\n        setContacts(currentContacts => [...currentContacts, newContact]);\n\n        // e.target.reset(); //el reset hace lo mismo que el de abajo, pero en este caso no podemos usarlo\n        // Una vez añadido algo en el formulario, posteriormente lo dejamos en blanco\n        setName(\"\");\n        setLastName(\"\");\n        setDirection(\"\");\n        setCity(\"\");\n        setPostalCode(\"\");\n        setPhoneNumber(\"\"); \n    }\n\n    return (\n        <form className=\"form-group\" onSubmit={submit}> \n            <input className=\"form-control mb-3 \" type=\"text\"  value={name}         onChange={handleName}        placeholder=\"Insert your name\" readonly></input>\n            <input className=\"form-control mb-3 \" type=\"text\"  value={lastName}     onChange={handleLastName}    placeholder=\"Insert your last name\" readonly></input>\n            <input className=\"form-control mb-3 \" type=\"text\"  value={direction}    onChange={handleDirection}   placeholder=\"Insert your direction\" readonly></input>\n            <input className=\"form-control mb-3\"  type=\"text\"  value={city}         onChange={handleCity}        placeholder=\"Insert your city\" readonly></input>\n            <input className=\"form-control mb-3\"  type=\"text\"  value={postalCode}   onChange={handlePostalCode}  placeholder=\"Insert your postal code\" readonly></input>\n            <input className=\"form-control mb-3\"  type=\"text\"  value={phoneNumber}  onChange={handlePhoneNumber} placeholder=\"Insert your phone number\" readonly></input>\n            <button type=\"submit\" className=\"mb-3 btn bg-success\" value=\"register\">Register</button>\n        </form>\n    )\n}\n\n//hacemos onChange y me metemos el nombre de cada función con las que vamos a hacer el evento\n//hacemos onSubmit y metemos el nombre de la función con las que queremos hacer el evento\n//ponemos el value asociado con cada nombre de la propiedad para que el formulario quede vacio después de añadirle algo","import {useState} from \"react\";\nimport './App.css';\nimport Schedule from \"./Components/Schedule\";\nimport Form from \"./Components/Form\";\n\nfunction App() {\n\n  const initialState =[\n    {name: \"Lucas\", lastName: \"Gómez\",direction: \"C/ Luz\",city: \"Málaga\",postalCode: 29005,phoneNumber: 607258741},\n    {name: \"Juan\", lastName: \"Cruz\",direction: \"C/ Sol\",city: \"Málaga\",postalCode: 29005,phoneNumber: 605958741},\n    {name: \"Sofia\", lastName: \"Hernández\",direction: \"C/ Eugenio\",city: \"Málaga\",postalCode: 29008,phoneNumber: 705258741}\n  ];\n  const [contacts, setContacts] = useState(initialState);\n\n  return (\n    <div className=\"container\">\n       <h2>ListBook</h2>\n      <Schedule contacts={contacts} setContacts={setContacts}/>\n      \n      <h2>New Contact</h2>\n      <Form setContacts={setContacts}/>  {//funcion para modificar el array (los contactos) en el form\n}</div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}